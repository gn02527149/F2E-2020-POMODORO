{"version":3,"sources":["component/DrawCircles.js","component/CurrentTask.js","component/TaskTimerSettings.js","component/TaskTimer.js","component/MainPage.js","component/SideNavContent.js","component/SideNav.js","component/App.js","index.js"],"names":["DrawCircles","tomatos","this","props","className","Array","count","fill","map","tomato","index","sum","React","CurrentTask","isTaskWorking","firstTask","title","TaskTimerSettings","handleTaskPlaying","isTaskPlaying","iconColor","defaultIconClass","onClick","TaskTimer","handleTasks","nowTimePlace","circleLength","nowTimerCircle","split","parseInt","viewBox","r","cx","cy","style","htmlFor","MainPage","tasks","length","SideNavContent","onChangeTask","bind","nowDate","Date","todayDateArray","getFullYear","getMonth","getDate","state","errorMsg","menuLists","start","newArray","forEach","item","afterOneDay","getTime","push","e","target","value","dataset","setState","number","data","doType","doIndex","join","whereSideMenu","passedTasks","id","type","onChange","handleTaskSetting","task","isEditing","passedTask","sevenDaysAgoDate","handleChartsPeriod","sevenDaysAgoDateArray","sevenDaysArray","_getSevenDaysArray","filter","completedTime","day","doneTaskCount","replace","SideNav","handleSideMenu","handleClickMenu","showSideMenu","menuTitle","Object","keys","values","App","workTimeLength","breakTimeLength","clearInterval","timerID","timeString","nowTimer","timeNumber","second","isCompleted","setInterval","_separateTimeString","_completedLevel","_combineTimeString","_resetTask","nowTime","shiftFirstTask","shift","updatedTimePlace","setTimeout","taskSettings","_startTimer","_breakTimer","_pauseTimer","doWhat","taskIsEditing","passedTaskIsEditing","splice","clickWhat","oneDay","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6617d51c.chunk.js","sourcesContent":["import * as React from 'react'\nimport './DrawCircles.scss';\n\nclass DrawCircles extends React.Component{\n    constructor(){\n        super()\n\n    }\n\n    render(){\n        const {tomatos} = this.props\n\n        return (\n            <div className='task-circles'>\n            {\n                // Array(tomatos.sum).fill('').map((tomato, index)=>{\n                //     return <div className={(index<tomatos.count?'task-circle task-circle-past':'task-circle')} key={'task-circle'+index}></div>\n                // })\n                Array(tomatos.count).fill('').map((tomato, index)=>{\n                    return <div className='task-circle task-circle-past' key={'task-circle'+index}></div>\n                })\n            }{\n                Array(tomatos.sum - tomatos.count).fill('').map((tomato, index)=>{\n                    return <div className='task-circle' key={'task-circle'+index+tomatos.count}></div>\n                })\n            }\n            </div>\n        )\n    }\n}\n\nexport default DrawCircles","import * as React from 'react'\nimport './CurrentTask.scss';\nimport DrawCircles from './DrawCircles';\n\nclass CurrentTask extends React.Component{\n    constructor(){\n        super()\n\n    }\n\n    render(){\n        const {isTaskWorking, firstTask} = this.props\n        const {title, tomatos} = firstTask\n\n        return (\n            <div className='task-block'>\n                <p className='title'>{title}</p>\n                { isTaskWorking ? (\n                    <div className='task-doing'>\n                        <DrawCircles tomatos={tomatos}/>\n                    </div>\n                    ):(\n                    <div className='break-card'>BREAK</div>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default CurrentTask","import * as React from 'react'\nimport './TaskTimerSettings.scss';\n\nclass TaskTimerSettings extends React.Component{\n    constructor(){\n        super()\n\n    }\n\n    render(){\n        const {handleTaskPlaying, isTaskPlaying, isTaskWorking} = this.props\n        const iconColor = isTaskWorking?'task-start':'task-break'\n        const defaultIconClass = 'material-icons '\n\n        return (\n            <div className='task-setting'>\n                <i className={defaultIconClass + (!isTaskPlaying && iconColor)} onClick={()=>{(!isTaskPlaying) && handleTaskPlaying('start')}}>play_arrow</i>\n                <i className={defaultIconClass + (isTaskPlaying && iconColor)} onClick={()=>{(isTaskPlaying) && handleTaskPlaying('pause')}}>pause</i>\n                <i className={defaultIconClass + (isTaskWorking && iconColor)} onClick={()=>{(isTaskWorking) && handleTaskPlaying('reset')}}>replay</i>\n            </div>\n        )\n    }\n}\n\nexport default TaskTimerSettings","import * as React from 'react'\nimport './TaskTimer.scss';\nimport TaskTimerSettings from './TaskTimerSettings';\n\nclass TaskTimer extends React.Component{\n    constructor(){\n        super()\n\n    }\n\n    render(){\n        const {handleTasks, handleTaskPlaying, isTaskPlaying, isTaskWorking, nowTimePlace} = this.props\n        const circleLength = isTaskWorking? 10 : 5\n\n        let nowTimerCircle = nowTimePlace.split(':')\n        nowTimerCircle = ( 1 - (parseInt(nowTimerCircle[0]) * 60 + parseInt(nowTimerCircle[1])) / (circleLength)) * 942\n\n        return (\n            <div className='task-timer'>\n                <div className='task-now'>\n                    <svg viewBox=\"0 0 300 300\">\n                        <circle className=\"circle1\" r=\"150\" cx=\"150\" cy=\"150\" data-stroke-break={isTaskWorking} style={{'strokeDasharray': (nowTimerCircle +' 942')}}/>\n                    </svg>\n                    <p className='task-now-timer'>{nowTimePlace}</p>\n                </div>\n                { (isTaskPlaying) ? (\n                <div className='task-complete'>\n                    <label htmlFor='checkbox-task-complete' style={{'cursor':'not-allowed'}}>TASK COMPLETE</label>\n                </div>\n                ):(\n                <div className='task-complete'>\n                    <label htmlFor='checkbox-task-complete' onClick={()=>{handleTasks({'doType':'completed', 'doIndex': -1}, true)}}>TASK COMPLETE</label>\n                </div>\n                )}\n                <TaskTimerSettings handleTaskPlaying={handleTaskPlaying} isTaskPlaying={isTaskPlaying} isTaskWorking={isTaskWorking}/>\n            </div>\n        )\n    }\n}\n\nexport default TaskTimer","import * as React from 'react'\nimport './MainPage.scss';\nimport CurrentTask from './CurrentTask';\nimport TaskTimer from './TaskTimer';\n\nclass MainPage extends React.Component{\n    constructor(){\n        super()\n    }\n\n    render(){\n        const {tasks, isTaskPlaying, isTaskWorking, handleTasks, handleTaskPlaying} = this.props\n        \n        return (\n            (tasks.length > 0) ? (\n            <div className='main-page'>\n                <CurrentTask firstTask={tasks[0]} isTaskWorking={isTaskWorking}/>\n                <TaskTimer isTaskPlaying={isTaskPlaying} isTaskWorking={isTaskWorking} nowTimePlace={tasks[0].nowTimePlace} handleTasks={handleTasks} handleTaskPlaying={handleTaskPlaying}/>\n            </div>\n            ):(\n                <div className='main-page'>\n                    <div className='orange'>\n                        <div className='color'></div>\n                    </div>\n                </div>\n            )\n        )\n    }\n}\n\nexport default MainPage","import * as React from 'react'\nimport './SideNavContent.scss';\nimport DrawCircles from './DrawCircles';\n\nclass SideNavContent extends React.Component{\n    constructor(){\n        \n        super()\n\n        this.onChangeTask=this.onChangeTask.bind(this)\n        this.handleTasks=this.handleTasks.bind(this)\n\n        const nowDate = new Date()\n        let todayDateArray = [nowDate.getFullYear(), nowDate.getMonth() + 1, nowDate.getDate()]\n\n        this.state={\n            title: '',\n            count: 1,\n            errorMsg: '',\n            menuLists: [\n                {'add-task': 'add_circle_outline'},\n                {'show-tasks': 'menu'},\n                {'analysis-tasks': 'bar_chart'},\n                {'choose-music': 'music_note'}\n            ],\n            todayDateArray\n        }\n    }\n\n    _getSevenDaysArray(start){\n        let newArray = [start]\n\n        Array(6).fill().forEach((item, index)=>{\n            let afterOneDay = new Date(new Date(newArray[index]).getTime() + 1*24*3600*1000)\n            newArray.push(`${afterOneDay.getFullYear()}/${parseInt(afterOneDay.getMonth()+1)}/${afterOneDay.getDate()}`)\n        })\n\n        return newArray\n    }\n\n    onChangeTask(e){\n        const {className, value, dataset} = e.target\n\n        this.setState({\n            [className]: (className === 'count'? parseInt(dataset.number) : value)\n        })\n    }\n\n    handleTasks(data){\n        let errorMsg = []\n        const {doType, doIndex} = data\n\n        if(this.props.isTaskPlaying){\n            errorMsg.push('請先將倒數器停止')\n        }\n        if(this.state.count === 0 && doType === 'create'){\n            errorMsg.push('請選擇想要添加幾顆番茄')\n        }\n        if(this.state.title === ''){\n            errorMsg.push('請輸入任務名稱')\n        }\n\n        if(errorMsg.length > 0){\n            this.setState({\n                errorMsg: 'ERROR：' + errorMsg.join('、')\n            })\n\n        }else if(doType!==''){\n            this.props.handleTasks({doType, doIndex}, this.state)\n\n            this.setState({\n                title: '',\n                errorMsg: '',\n                count: 1\n            })\n        }\n    }\n\n    render(){\n        let {whereSideMenu, tasks, passedTasks} = this.props\n\n        switch (whereSideMenu){\n\n            case 'add-task':\n            const {title, count, errorMsg} = this.state\n\n            return (\n                <div id='side-page-content' className='add-task-content'>\n                    <p className='title'>ADD NEW TASK</p>\n                    <div className='content-block'>\n                        <p className='sub-title'>TASK TITLE</p>\n                        <input className='title' type='text' onChange={this.onChangeTask} value={title}/>\n                    </div>\n                    <div className='content-block'>\n                        <p className='sub-title'>ESTIMATED TOMOTO</p>\n                        <div className='tomatos'>\n                            {\n                                Array(10).fill('').map((item, index)=>{\n                                    return (\n                                        <div className='tomato' key={'tomato'+index}>\n                                            <label className='count' onClick={this.onChangeTask} data-number={index+1} data-filled={(count > index ? true : false)}></label>\n                                        </div>\n                                    )\n                                })\n                            }\n                        </div>\n                    </div>\n                    <button onClick={()=>{this.handleTasks({'doType':'create', 'doIndex': -1})}}>ADD TASK</button>\n                    <p className='error-msg'>{errorMsg}</p>\n                </div>\n            )\n            break\n            \n            case 'show-tasks':\n            const {handleTaskSetting, handleTasks} = this.props\n\n            return (\n                <div id='side-page-content' className='show-tasks-content'>\n                    <p className='title'>TASK LISTS</p>\n                    <div className='content-block'>\n                        <p className='sub-title'>TO DO</p>\n                        <ul className='todo-content-block'>\n                            { tasks.length > 0 &&\n                            tasks.map((task, index)=>{\n                                const {title, tomatos, isEditing} = task\n                                return (\n                                    <li className='todo-content' key={'todo-content'+index}>\n                                        <div className='show-todo'>\n                                            <div className='task-info'>\n                                                <p>{title}</p>\n                                                <DrawCircles tomatos={tomatos}/>\n                                            </div>\n                                            <i className=\"task-setting fas fa-ellipsis-h\" data-rotate={isEditing} onClick={()=>{handleTaskSetting({'doType':'edit', 'doIndex': index}, {'tasks': task})}}></i>\n                                        </div>\n                                        { isEditing === true && (\n                                        <div className='edit-todo'>\n                                            <p className='edit-todo-title'>TASK TITLE</p>\n                                            <input className='title' type='text' onChange={this.onChangeTask} value={this.state.title}/>\n                                            <button className='edit-todo-save' onClick={()=>{this.handleTasks({'doType':'edit', 'doIndex': index})}}>SAVE</button>\n                                            <button className='edit-todo-delete' onClick={()=>{handleTasks({'doType':'delete', 'doIndex': index})}}>DELETE</button>\n                                        </div>\n                                        )}\n                                    </li>\n                                )\n                            })\n                            }\n                        </ul>\n                    </div>\n                    <div className='content-block'>\n                        <p className='sub-title'>DONE</p>\n                        <ul className='done-content-block'>\n                            { passedTasks.length > 0 &&\n                            passedTasks.map((passedTask, index)=>{\n                                const {title, tomatos, isEditing} = passedTask\n                                return (\n                                    <li className='done-content' key={'done-content'+index}>\n                                        <div className='show-done'>\n                                            <i className=\"far fa-check-circle\"></i>\n                                            <div className='task-info'>\n                                                <p>{title}</p>\n                                                <DrawCircles tomatos={tomatos}/>\n                                            </div>\n                                            <i className=\"task-setting fas fa-ellipsis-h\" data-rotate={isEditing} onClick={()=>{handleTaskSetting({'doType':'edit', 'doIndex': index}, {'passedTasks': passedTask})}}></i>\n                                        </div>\n                                        { isEditing===true && (\n                                        <div className='edit-done'>\n                                            <button className='edit-todo-save' onClick={()=>{handleTasks({'doType':'redo', 'doIndex': index})}}>REDO</button>\n                                        </div>\n                                        )}\n                                    </li>\n                                )\n                            })\n                            }\n                        </ul>\n                    </div>\n                </div>\n            )\n            break\n\n            case 'analysis-tasks':\n            const {todayDateArray} = this.state\n            const {sevenDaysAgoDate, handleChartsPeriod} = this.props\n\n            const sevenDaysAgoDateArray = [sevenDaysAgoDate.getFullYear(), sevenDaysAgoDate.getMonth()+1, sevenDaysAgoDate.getDate()]\n            const sevenDaysArray = this._getSevenDaysArray(sevenDaysAgoDateArray.join('/'))\n\n            return (\n                <div id='side-page-content' className='analysis-tasks-content'>\n                    <p className='title'>ANALYTICS REPORT</p>\n                    <div className='content-block'>\n                        <p className='sub-title'>TOMATO OF THIS WEEKE</p>\n                        <div className='analysis-datas'>\n                            <div className='analysis-data-block'>\n                                <p className='statistics-data'>\n                                {\n                                    passedTasks.filter((passedTask, index)=>{\n                                        return new Date(passedTask.completedTime).getTime() === new Date(todayDateArray.join('/')).getTime()\n                                    }).length\n                                }\n                                </p>\n                                <p className='statistics-period'>TODAY</p>\n                            </div>\n                            <div className='analysis-data-block'>\n                                <p className='statistics-data'>\n                                    { passedTasks.filter((passedTask, index)=>{\n                                        return new Date(passedTask.completedTime).getTime() >= new Date(sevenDaysArray[0]).getTime() && new Date(passedTask.completedTime).getTime() <= new Date(sevenDaysArray[6]).getTime()\n                                    }).length\n                                    }\n                                </p>\n                                <p className='statistics-period'>{sevenDaysArray[0] + '-' + sevenDaysArray[6]}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className='content-block'>\n                        <p className='sub-title'>CHART</p>\n                        <div className='analysis-charts'>\n                        {\n                            sevenDaysArray.map((day, index)=>{\n                                const doneTaskCount = passedTasks.filter((passedTask, index)=>{\n                                    return passedTask.completedTime === day\n                                }).length\n\n                                return (\n                                    <div className='analysis-charts-column' key={'analysis-charts-column'+index}>\n                                        <div className='analysis-charts-count'>\n                                        <p className='analysis-charts-count-number'>{doneTaskCount > 0 && doneTaskCount}</p>\n                                        <DrawCircles tomatos={{'sum': doneTaskCount, 'count': doneTaskCount}}/>\n                                        </div>\n                                        <div className='analysis-charts-period'>{day.replace(todayDateArray[0]+'/','')}</div>\n                                    </div>\n                                )\n                            })\n                        }\n                        </div>\n                        <div className='setting-block'>\n                            <button onClick={()=>{handleChartsPeriod('prev')}}>PREV</button>\n                            {(sevenDaysArray[6] === todayDateArray.join('/')) ? (\n                                <button className='not-click'>NEXT</button>\n                            ):(\n                                <button onClick={()=>{handleChartsPeriod('next')}}>NEXT</button>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            )\n            break\n\n            case 'choose-music':\n            return (\n                <div id='side-page-content' className='choose-music-content'>\n                    <p className='title'>RING TONE</p>\n                    <div className='content-block'>\n                        <p className='sub-title'>WORK</p>\n                        <ul className='music-content-block'>\n                        </ul>\n                    </div>\n                    <div className='content-block'>\n                        <p className='sub-title'>BREAK</p>\n                        <ul className='music-content-block'>\n                        </ul>\n                    </div>\n                </div>\n            )\n            break\n\n            default:\n            break\n        }\n    }\n}\n\nexport default SideNavContent","import * as React from 'react'\nimport './SideNav.scss';\nimport SideNavContent from './SideNavContent';\n\nclass SideNav extends React.Component{\n    constructor(){\n        super()\n\n        this.state = {\n            menuLists: [\n                {'add-task': 'add_circle_outline'},\n                {'show-tasks': 'menu'},\n                {'analysis-tasks': 'bar_chart'},\n                {'choose-music': 'music_note'}\n            ]\n        }\n    }\n\n\n    render(){\n        const {tasks, passedTasks, handleTasks, handleTaskSetting, handleSideMenu, handleClickMenu, handleChartsPeriod, isTaskPlaying, showSideMenu, whereSideMenu, sevenDaysAgoDate} = this.props\n        const {menuLists} = this.state\n\n        return (\n            <div className='side-page'>\n                <div id='side-page-menu'>\n                {\n                    menuLists.map((item, index)=>{\n                        const menuTitle = Object.keys(item)[0]\n\n                        return (<i onClick={()=>{handleClickMenu(menuTitle)}} data-menu-clicked={whereSideMenu === menuTitle} className={'material-icons ' + menuTitle} key={'side-menu' + index}>{Object.values(item)}</i>)\n                    })\n                }\n                </div>\n                <div id='control-button'>\n                    <input type='checkbox' id='control-nav' onClick={()=>{handleSideMenu()}}/>\n                    <label htmlFor='control-nav'></label>\n                </div>\n                { (showSideMenu) &&\n                    <SideNavContent tasks={tasks} passedTasks={passedTasks} isTaskPlaying={isTaskPlaying} handleTasks={handleTasks} handleTaskSetting={handleTaskSetting} handleChartsPeriod={handleChartsPeriod} whereSideMenu={whereSideMenu} sevenDaysAgoDate={sevenDaysAgoDate}/>\n                }\n            </div>\n        )\n    }\n}\n\nexport default SideNav\n\n\n/*\n<i className=\"add-task material-icons menu-click\">add_circle_outline</i>\n<i className=\"show-tasks material-icons\">menu</i>\n<i className=\"analysis-tasks material-icons\">bar_chart</i>\n<i className=\"choose-music material-icons\">music_note</i>\n*/","import React from 'react';\nimport './App.scss';\nimport MainPage from './MainPage';\nimport SideNav from './SideNav';\n\nclass App extends React.Component {\n  constructor(){\n    super()\n\n    this.handleSideMenu=this.handleSideMenu.bind(this)\n    this.handleTaskPlaying=this.handleTaskPlaying.bind(this)\n    this.handleTasks=this.handleTasks.bind(this)\n    this.handleClickMenu=this.handleClickMenu.bind(this)\n    this.handleTaskSetting=this.handleTaskSetting.bind(this)\n    this.handleChartsPeriod=this.handleChartsPeriod.bind(this)\n\n    let sevenDaysAgoDate = new Date(new Date()-6*24*3600*1000)\n\n    this.workTimeLength = '00:10'\n    this.breakTimeLength = '00:05'\n\n    this.state = {\n      showSideMenu: false,\n      isTaskWorking: true, // Task 進行 or 休息\n      isTaskPlaying: false, // 倒數 or 暫停\n      whereSideMenu: 'add-task',\n      sevenDaysAgoDate,\n      passedTasks: [\n        // {\n        //   title: 'second task',\n        //   tomatos: {\n        //     sum: 8,\n        //     count: 7\n        //   },\n        //   isCompleted: false,\n        //   completedTime: '2019/8/4',\n        //   nowTimePlace: this.workTimeLength,\n        //   isEditing: false\n        // }\n      ],\n      tasks: [\n      // {\n      //   title: 'first task',\n      //   tomatos: {\n      //     sum: 10,\n      //     count: 9\n      //   },\n      //   isCompleted: false,\n      //   completedTime: null,\n      //   nowTimePlace: this.breakTimeLength,\n      //   isEditing: false\n      // }\n      ]\n    }\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.timerID)\n  }\n\n  _separateTimeString(timeString){\n    let nowTimer = timeString.split(':')\n\n    return parseInt(nowTimer[0]) * 60 + parseInt(nowTimer[1])\n  }\n\n  _combineTimeString(timeNumber){\n    let second = (timeNumber % 60 < 10)? '0' + timeNumber % 60 : timeNumber % 60\n    let minute = ((timeNumber - second) / 60 < 10)? '0' + (timeNumber - second) / 60 : (timeNumber - second) / 60\n\n    return minute + ':' + second\n  }\n\n  _startTimer(){\n    clearInterval(this.timerID)\n    let {tasks} = this.state\n\n    if(tasks[0].isCompleted){\n      return\n    }\n\n    this.timerID = setInterval(()=>{\n      tasks = this.state.tasks\n      let nowTimer = this._separateTimeString(tasks[0].nowTimePlace)\n\n      if(nowTimer === 0){\n        clearInterval(this.timerID)\n        \n        tasks[0].tomatos.count++\n        this.setState({\n          tasks\n        })\n        this._completedLevel()\n        return\n\n      }else{\n        nowTimer--\n        tasks[0].nowTimePlace = this._combineTimeString(nowTimer)\n        \n        this.setState({\n          tasks,\n          isTaskWorking: true,\n          isTaskPlaying: true\n        })\n      }\n    }, 500)\n  }\n\n  _pauseTimer(){\n    clearInterval(this.timerID)\n    const tasks = this.state.tasks\n\n    this.setState({\n      tasks\n    })\n  }\n\n  _breakTimer(){\n    clearInterval(this.timerID)\n    let {tasks} = this.state\n\n    this.timerID = setInterval(()=>{\n      tasks = this.state.tasks\n      let {nowTimePlace, tomatos} = tasks[0]\n      let nowTimer = this._separateTimeString(nowTimePlace)\n\n      if((tomatos.count === tomatos.sum) && (nowTimer === 0)){\n        clearInterval(this.timerID)\n        tasks[0].isCompleted=true\n\n        this.setState({\n          isTaskWorking: true,\n          isTaskPlaying: false,\n          tasks\n        })\n        this._resetTask()\n        return\n\n      }else if(nowTimer === 0){\n        clearInterval(this.timerID)\n        this._completedLevel()\n        return\n\n      }else{\n        nowTimer--\n        tasks[0].nowTimePlace = this._combineTimeString(nowTimer)\n\n        this.setState({\n          tasks\n        })\n      }\n    }, 500)\n  }\n\n  _resetTask(){\n    let {tasks, passedTasks}=this.state\n\n    if(tasks[0].isCompleted){\n      const nowTime = new Date()\n      tasks[0].completedTime = `${nowTime.getFullYear()}/${parseInt(nowTime.getMonth() + 1)}/${nowTime.getDate()}`\n      let shiftFirstTask = tasks.shift()\n      passedTasks.push(shiftFirstTask)\n      this.setState({\n        tasks,\n        passedTasks\n      })\n    }\n  }\n\n  _completedLevel(){\n    let {tasks, isTaskWorking} = this.state\n    let updatedTimePlace = isTaskWorking ? this.breakTimeLength : this.workTimeLength\n\n    tasks[0].nowTimePlace = updatedTimePlace\n\n    setTimeout(()=>{\n      this.setState({\n        tasks,\n        isTaskWorking: !isTaskWorking,\n        isTaskPlaying: false\n      })\n    }, 300)\n  }\n\n  handleTaskPlaying(taskSettings){\n    let {tasks, isTaskWorking} = this.state\n\n    switch(taskSettings){\n\n      case 'start':\n        if(isTaskWorking){\n          this._startTimer()\n\n          this.setState({\n            isTaskPlaying: true,\n            isTaskWorking: true\n          })\n\n        }else{\n          this._breakTimer()\n\n          this.setState({\n            isTaskPlaying: true,\n            isTaskWorking: false\n          })\n\n        }\n      break\n\n      case 'pause':\n        this._pauseTimer()\n\n        this.setState({\n          isTaskPlaying: false\n        })\n      break\n\n      case 'reset':\n        tasks[0].nowTimePlace = this.workTimeLength\n        \n        this.setState({\n          tasks\n        })\n      break\n\n      default:\n      break\n    }\n  }\n\n  handleSideMenu(){\n    this.setState({\n        showSideMenu: !this.state.showSideMenu\n    })\n  }\n\n  handleTaskSetting(doWhat, data){\n    let {doType, doIndex} = doWhat\n    let {tasks, passedTasks} = this.state\n\n    if('tasks' in data ){\n      let taskIsEditing = data.tasks.isEditing\n\n      tasks = tasks.map((task, index)=>{\n        if(taskIsEditing){\n          task.isEditing = false\n        }else{\n          task.isEditing = (doIndex === index)? !taskIsEditing : taskIsEditing\n        }\n        return task\n\n      })\n      \n      this.setState({\n        tasks\n      })\n\n    }else if('passedTasks' in data){\n      let passedTaskIsEditing = data.passedTasks.isEditing\n\n      passedTasks = passedTasks.map((passedTask, index)=>{\n        if(passedTaskIsEditing){\n          passedTask.isEditing = false\n        }else{\n          passedTask.isEditing = (doIndex === index)? !passedTaskIsEditing : passedTaskIsEditing\n        }\n        return passedTask\n      })\n      \n      this.setState({\n        passedTasks\n      })\n    }\n  }\n\n  handleTasks(doWhat, data){\n    let {doType, doIndex} = doWhat\n    let {tasks, passedTasks} = this.state\n    \n    switch(doType){\n\n      case 'create':\n        tasks.push({\n          title: data.title,\n          tomatos: {\n            sum: data.count,\n            count: 0\n          },\n          isCompleted: false,\n          completedTime: null,\n          nowTimePlace: this.workTimeLength,\n          isEditing: false\n        })\n\n        this._resetTask()\n        this.setState({\n          tasks\n        })\n      break\n      \n      case 'edit':\n        tasks[doIndex].title = data.title\n        tasks[doIndex].isEditing = false\n        \n        this.setState({\n          tasks\n        })\n      break\n      \n      case 'delete':\n        if(doIndex===0){\n          return\n        }\n        tasks.splice(doIndex, 1)\n\n        this._resetTask()\n        this.setState({\n          tasks\n        })\n      break\n\n      case 'redo':\n        passedTasks[doIndex].nowTimePlace = this.workTimeLength\n        passedTasks[doIndex].isCompleted = false\n        passedTasks[doIndex].isEditing = false\n        tasks.push(passedTasks[doIndex])\n        passedTasks.splice(doIndex, 1)\n        \n        this.setState({\n          tasks,\n          passedTasks\n        })\n      break\n      \n      case 'completed':\n        clearInterval(this.timerID)\n        tasks[0].isCompleted = true\n\n        this._resetTask()\n        this.setState({\n          tasks,\n          passedTasks\n        })\n      break\n\n      default:\n      break\n    }\n  }\n\n  handleClickMenu(clickWhat){\n\n    this.setState({\n      whereSideMenu: clickWhat\n    })\n  }\n\n  handleChartsPeriod(type){\n    const oneDay = 1 * 24 * 3600 * 1000\n    let sevenDaysAgoDate = this.state.sevenDaysAgoDate\n\n    if(type === 'prev'){\n      sevenDaysAgoDate = new Date(sevenDaysAgoDate.getTime() - oneDay)\n\n    }else if(type === 'next'){\n      sevenDaysAgoDate = new Date(sevenDaysAgoDate.getTime() + oneDay)\n\n    }\n\n    this.setState({\n      sevenDaysAgoDate\n    })\n\n  }\n\n  render(){\n    let {tasks, passedTasks, isTaskPlaying, isTaskWorking, showSideMenu, whereSideMenu, sevenDaysAgoDate} = this.state\n\n    return (\n        <div className='App'>\n            <MainPage tasks={tasks} isTaskPlaying={isTaskPlaying} isTaskWorking={isTaskWorking} handleTasks={this.handleTasks} handleTaskPlaying={this.handleTaskPlaying}/>\n            <SideNav passedTasks={passedTasks} tasks={tasks} isTaskPlaying={isTaskPlaying} handleTasks={this.handleTasks} handleTaskSetting={this.handleTaskSetting} handleSideMenu={this.handleSideMenu} handleChartsPeriod={this.handleChartsPeriod} showSideMenu={showSideMenu} whereSideMenu={whereSideMenu} sevenDaysAgoDate={sevenDaysAgoDate} handleClickMenu={this.handleClickMenu}/>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}